import { createElement } from 'react';
import { element, object, oneOfType, number, string } from 'prop-types';

function styleInject(css, ref) {
  if ( ref === void 0 ) ref = {};
  var insertAt = ref.insertAt;

  if (!css || typeof document === 'undefined') { return; }

  var head = document.head || document.getElementsByTagName('head')[0];
  var style = document.createElement('style');
  style.type = 'text/css';

  if (insertAt === 'top') {
    if (head.firstChild) {
      head.insertBefore(style, head.firstChild);
    } else {
      head.appendChild(style);
    }
  } else {
    head.appendChild(style);
  }

  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    style.appendChild(document.createTextNode(css));
  }
}

var css = "h1 {\n    font-size: 42pt;\n    margin-top: 0;\n    margin-bottom: 0;\n}\n\nh2 {\n    font-size: 24pt;\n}\n\nh3 {\n    font-size: 12pt;\n}\n\n.styles_ReactBorderWrapperParent__1rSkK {\n    display: inline-block;\n}\n\n.styles_ReactBorderWrapperBorderChildren__cQpUU {\n    display: flex;\n    flex-direction: row;\n}\n\n.styles_ReactBorderWrapperBorderHorizontalParent__3uXUt {\n    display: flex;\n    flex-direction: row;\n}\n\n.styles_ReactBorderWrapperBorderVerticalParent__1x3XQ {\n    display: flex;\n    flex-direction: column;\n}\n\n.styles_ReactBorderWrapperBorderBottomElement__3Yt1Z {\n    align-self: flex-end;\n}\n\n.styles_ReactBorderWrapperBorderRightElement__2AJ8r {\n    align-self: flex-end;\n}\n\n.styles_ReactBorderWrapperCorner__t4zmm {\n    display: flex;\n}";
var styles = {"ReactBorderWrapperParent":"styles_ReactBorderWrapperParent__1rSkK","ReactBorderWrapperBorderChildren":"styles_ReactBorderWrapperBorderChildren__cQpUU","ReactBorderWrapperBorderHorizontalParent":"styles_ReactBorderWrapperBorderHorizontalParent__3uXUt","ReactBorderWrapperBorderVerticalParent":"styles_ReactBorderWrapperBorderVerticalParent__1x3XQ","ReactBorderWrapperBorderBottomElement":"styles_ReactBorderWrapperBorderBottomElement__3Yt1Z","ReactBorderWrapperBorderRightElement":"styles_ReactBorderWrapperBorderRightElement__2AJ8r","ReactBorderWrapperCorner":"styles_ReactBorderWrapperCorner__t4zmm"};
styleInject(css);

function determineLocations(_a) {
    var bottomElement = _a.bottomElement, leftElement = _a.leftElement, topElement = _a.topElement, rightElement = _a.rightElement;
    var top = topElement !== undefined;
    var right = rightElement !== undefined;
    var bottom = bottomElement !== undefined;
    var left = leftElement !== undefined;
    var topRight = top || right;
    var bottomRight = right || bottom;
    var bottomLeft = bottom || left;
    var topLeft = left || top;
    return { top: top, right: right, bottom: bottom, left: left, topRight: topRight, bottomRight: bottomRight, bottomLeft: bottomLeft, topLeft: topLeft };
}
function parsePercentage(float) {
    if (float === void 0) { float = 0.5; }
    if (float > 1) {
        float = 1;
    }
    else if (float < 0) {
        float = 0;
    }
    return { primary: Math.round(float * 100) + "%", secondary: Math.round((1 - float) * 100) + "%" };
}
var ReactBorderWrapperParent = styles.ReactBorderWrapperParent, ReactBorderWrapperBorderVerticalParent = styles.ReactBorderWrapperBorderVerticalParent, ReactBorderWrapperCorner = styles.ReactBorderWrapperCorner, ReactBorderWrapperBorderHorizontalParent = styles.ReactBorderWrapperBorderHorizontalParent, ReactBorderWrapperBorderChildren = styles.ReactBorderWrapperBorderChildren, ReactBorderWrapperBorderRightElement = styles.ReactBorderWrapperBorderRightElement;
var ReactBorderWrapper = function (props) {
    var positions = determineLocations(props);
    var undefinedPosition = { primary: "50%", secondary: "50%" };
    var topPosition = positions.top ? parsePercentage(props.topPosition) : undefinedPosition;
    var rightPosition = positions.right ? parsePercentage(props.rightPosition) : undefinedPosition;
    var bottomPosition = positions.bottom ? parsePercentage(props.bottomPosition) : undefinedPosition;
    var leftPosition = positions.left ? parsePercentage(props.leftPosition) : undefinedPosition;
    var topOffset = positions.top ? props.topOffset : undefined;
    var rightOffset = positions.right ? props.rightOffset : undefined;
    var bottomOffset = positions.bottom ? props.bottomOffset : undefined;
    var leftOffset = positions.left ? props.leftOffset : undefined;
    var topGap = positions.top ? props.topGap : undefined;
    var rightGap = positions.right ? props.rightGap : undefined;
    var bottomGap = positions.bottom ? props.bottomGap : undefined;
    var leftGap = positions.left ? props.leftGap : undefined;
    return (createElement("div", { className: ReactBorderWrapperParent, style: props.style },
        createElement("div", { className: ReactBorderWrapperBorderHorizontalParent },
            createElement("div", { className: ReactBorderWrapperCorner, style: {
                    borderTopLeftRadius: props.borderRadius,
                    borderTop: props.borderType,
                    borderLeft: props.borderType,
                    borderTopWidth: props.borderWidth,
                    borderLeftWidth: props.borderWidth,
                    borderTopColor: props.borderColour,
                    borderLeftColor: props.borderColour,
                    marginTop: topOffset,
                    marginLeft: leftOffset,
                    minHeight: props.borderRadius,
                    minWidth: props.borderRadius,
                } }),
            createElement("div", { style: {
                    borderTop: props.borderType,
                    borderTopWidth: props.borderWidth,
                    borderTopColor: props.borderColour,
                    width: topPosition.primary,
                    marginTop: topOffset
                } }),
            createElement("div", { style: {
                    paddingLeft: topGap,
                    paddingRight: topGap,
                } }, props.topElement),
            createElement("div", { style: {
                    borderTop: props.borderType,
                    borderTopWidth: props.borderWidth,
                    borderTopColor: props.borderColour,
                    width: topPosition.secondary,
                    marginTop: topOffset
                } }),
            createElement("div", { className: ReactBorderWrapperCorner, style: {
                    borderTopRightRadius: props.borderRadius,
                    borderTop: props.borderType,
                    borderRight: props.borderType,
                    borderTopWidth: props.borderWidth,
                    borderRightWidth: props.borderWidth,
                    borderTopColor: props.borderColour,
                    borderRightColor: props.borderColour,
                    marginTop: topOffset,
                    minHeight: props.borderRadius,
                    minWidth: props.borderRadius,
                    marginRight: rightOffset,
                } })),
        createElement("div", { className: ReactBorderWrapperBorderChildren },
            createElement("div", { className: ReactBorderWrapperBorderVerticalParent },
                createElement("div", { style: {
                        borderLeft: props.borderType,
                        borderLeftWidth: props.borderWidth,
                        borderLeftColor: props.borderColour,
                        height: leftPosition.primary,
                        marginLeft: leftOffset
                    } }),
                createElement("div", { style: {
                        alignSelf: "flex-start",
                        paddingTop: leftGap,
                        paddingBottom: leftGap,
                    } }, props.leftElement),
                createElement("div", { style: {
                        borderLeft: props.borderType,
                        borderLeftWidth: props.borderWidth,
                        borderLeftColor: props.borderColour,
                        height: leftPosition.secondary,
                        marginLeft: leftOffset
                    } })),
            createElement("div", { style: {
                    padding: props.innerPadding
                } }, props.children),
            createElement("div", { className: ReactBorderWrapperBorderVerticalParent },
                createElement("div", { style: {
                        borderRight: props.borderType,
                        borderRightColor: props.borderColour,
                        borderRightWidth: props.borderWidth,
                        height: rightPosition.primary,
                        marginRight: rightOffset,
                    } }),
                createElement("div", { className: ReactBorderWrapperBorderRightElement, style: {
                        paddingTop: rightGap,
                        paddingBottom: rightGap,
                    } }, props.rightElement),
                createElement("div", { style: {
                        borderRight: props.borderType,
                        borderRightColor: props.borderColour,
                        borderRightWidth: props.borderWidth,
                        height: rightPosition.secondary,
                        marginRight: rightOffset,
                    } }))),
        createElement("div", { className: ReactBorderWrapperBorderHorizontalParent },
            createElement("div", { style: {
                    borderBottomLeftRadius: props.borderRadius,
                    borderBottom: props.borderType,
                    borderLeft: props.borderType,
                    borderBottomWidth: props.borderWidth,
                    borderLeftWidth: props.borderWidth,
                    borderBottomColor: props.borderColour,
                    borderLeftColor: props.borderColour,
                    minHeight: props.borderRadius,
                    minWidth: props.borderRadius,
                    marginBottom: bottomOffset,
                    marginLeft: leftOffset,
                } }),
            createElement("div", { style: {
                    borderBottom: props.borderType,
                    borderBottomWidth: props.borderWidth,
                    borderBottomColor: props.borderColour,
                    width: bottomPosition.primary,
                    marginBottom: bottomOffset
                } }),
            createElement("div", { style: {
                    alignSelf: "flex-end",
                    paddingLeft: bottomGap,
                    paddingRight: bottomGap,
                } }, props.bottomElement),
            createElement("div", { style: {
                    borderBottom: props.borderType,
                    borderBottomWidth: props.borderWidth,
                    borderBottomColor: props.borderColour,
                    width: bottomPosition.secondary,
                    marginBottom: bottomOffset
                } }),
            createElement("div", { style: {
                    borderBottomRightRadius: props.borderRadius,
                    borderBottom: props.borderType,
                    borderRight: props.borderType,
                    borderBottomWidth: props.borderWidth,
                    borderRightWidth: props.borderWidth,
                    borderBottomColor: props.borderColour,
                    borderRightColor: props.borderColour,
                    marginBottom: bottomOffset,
                    minHeight: props.borderRadius,
                    minWidth: props.borderRadius,
                    marginRight: rightOffset,
                } }))));
};
ReactBorderWrapper.propTypes = {
    children: element,
    style: object,
    innerPadding: oneOfType([number, string]),
    borderWidth: oneOfType([number, string]),
    borderRadius: oneOfType([number, string]),
    borderColour: string,
    borderType: string,
    topElement: element,
    topPosition: number,
    topOffset: oneOfType([number, string]),
    topGap: oneOfType([number, string]),
    rightElement: element,
    rightPosition: number,
    rightOffset: oneOfType([number, string]),
    rightGap: oneOfType([number, string]),
    bottomElement: element,
    bottomPosition: number,
    bottomOffset: oneOfType([number, string]),
    bottomGap: oneOfType([number, string]),
    leftElement: element,
    leftPosition: number,
    leftOffset: oneOfType([number, string]),
    leftGap: oneOfType([number, string]),
};
ReactBorderWrapper.defaultProps = {
    borderWidth: "4px",
    innerPadding: "20px",
    borderRadius: "15px",
    borderColour: "#000000",
    borderType: "solid",
    topOffset: "0px",
    rightOffset: "3px",
    bottomOffset: "0px",
    leftOffset: "3px",
    topGap: "0px",
    rightGap: "0px",
    bottomGap: "0px",
    leftGap: "0px",
};

export default ReactBorderWrapper;
//# sourceMappingURL=index.es.js.map
